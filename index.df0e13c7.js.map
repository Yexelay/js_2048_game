{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js"],"sourcesContent":["\"use strict\";\nvar $a5fd07fa01589658$exports = {};\n\"use strict\";\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */ class $a5fd07fa01589658$var$Game {\n    static Status = {\n        idle: \"idle\",\n        playing: \"playing\",\n        win: \"win\",\n        lose: \"lose\"\n    };\n    constructor(initialState = [\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ]\n    ]){\n        this.state = [\n            ...initialState\n        ];\n        this.status = $a5fd07fa01589658$var$Game.Status.idle;\n        this.score = 0;\n        this.initialState = initialState;\n    }\n    getScore() {\n        return this.score;\n    }\n    getState() {\n        return this.state;\n    }\n    getStatus() {\n        this.updateStatus();\n        return this.status;\n    }\n    start() {\n        this.status = $a5fd07fa01589658$var$Game.Status.playing;\n        this.state = this.initialState.concat();\n        this.createRandomTile();\n        this.createRandomTile();\n        this.printTiles();\n    }\n    restart() {\n        this.clearBoard();\n        this.printTiles();\n        this.status = $a5fd07fa01589658$var$Game.Status.idle;\n        this.score = 0;\n    }\n    moveLeft() {\n        if (this.status !== $a5fd07fa01589658$var$Game.Status.playing) return;\n        this.saveState();\n        let moveTiles = false;\n        for(let row = 0; row < 4; row++){\n            let merged = false;\n            for(let tile = 1; tile < 4; tile++)if (this.state[row][tile] > 0) {\n                let moveTile = 0;\n                let merge = false;\n                while(this.state[row][tile - moveTile - 1] === 0)moveTile++;\n                if (!merged && this.state[row][tile - moveTile - 1] === this.state[row][tile]) {\n                    moveTile++;\n                    merge = true;\n                }\n                if (moveTile > 0) {\n                    if (!merged && merge) {\n                        merged = true;\n                        const newNumber = this.state[row][tile - moveTile] * 2;\n                        this.state[row][tile - moveTile] = newNumber;\n                        this.score += newNumber;\n                    } else {\n                        merged = false;\n                        this.state[row][tile - moveTile] = this.state[row][tile];\n                    }\n                    this.state[row][tile] = 0;\n                    moveTiles = true;\n                }\n            }\n        }\n        if (moveTiles) this.createRandomTile();\n        return moveTiles;\n    }\n    moveRight() {\n        if (this.status !== $a5fd07fa01589658$var$Game.Status.playing) return;\n        this.saveState();\n        let moveTiles = false;\n        for(let row = 0; row < 4; row++){\n            let merged = false;\n            for(let tile = 2; tile >= 0; tile--)if (this.state[row][tile] > 0) {\n                let moveTile = 0;\n                let merge = false;\n                while(this.state[row][tile + moveTile + 1] === 0)moveTile++;\n                if (!merged && this.state[row][tile + moveTile + 1] === this.state[row][tile]) {\n                    moveTile++;\n                    merge = true;\n                }\n                if (moveTile > 0) {\n                    if (!merged && merge) {\n                        merged = true;\n                        const newNumber = this.state[row][tile + moveTile] * 2;\n                        this.state[row][tile + moveTile] = newNumber;\n                        this.score += newNumber;\n                    } else {\n                        merged = false;\n                        this.state[row][tile + moveTile] = this.state[row][tile];\n                    }\n                    this.state[row][tile] = 0;\n                    moveTiles = true;\n                }\n            }\n        }\n        if (moveTiles) this.createRandomTile();\n        return moveTiles;\n    }\n    moveUp() {\n        if (this.status !== $a5fd07fa01589658$var$Game.Status.playing) return;\n        this.saveState();\n        let moveTiles = false;\n        for(let column = 0; column < 4; column++){\n            let merged = false;\n            for(let tile = 1; tile < 4; tile++)if (this.state[tile][column] > 0) {\n                let moveTile = 0;\n                let merge = false;\n                while(tile - moveTile - 1 >= 0 && this.state[tile - moveTile - 1][column] === 0)moveTile++;\n                if (!merged && tile - moveTile - 1 >= 0 && this.state[tile - moveTile - 1][column] === this.state[tile][column]) {\n                    moveTile++;\n                    merge = true;\n                }\n                if (moveTile > 0) {\n                    if (!merged && merge) {\n                        merged = true;\n                        const newNumber = this.state[tile - moveTile][column] * 2;\n                        this.state[tile - moveTile][column] = newNumber;\n                        this.score += newNumber;\n                    } else {\n                        merged = false;\n                        this.state[tile - moveTile][column] = this.state[tile][column];\n                    }\n                    this.state[tile][column] = 0;\n                    moveTiles = true;\n                }\n            }\n        }\n        if (moveTiles) this.createRandomTile();\n        return moveTiles;\n    }\n    moveDown() {\n        if (this.status !== $a5fd07fa01589658$var$Game.Status.playing) return;\n        this.saveState();\n        let moveTiles = false;\n        for(let column = 0; column < 4; column++){\n            let merged = false;\n            for(let tile = 2; tile >= 0; tile--)if (this.state[tile][column] > 0) {\n                let moveTile = 0;\n                let merge = false;\n                while(tile + moveTile + 1 < this.state.length && this.state[tile + moveTile + 1][column] === 0)moveTile++;\n                if (!merged && tile + moveTile + 1 < this.state.length && this.state[tile + moveTile + 1][column] === this.state[tile][column]) {\n                    moveTile++;\n                    merge = true;\n                }\n                if (moveTile > 0) {\n                    if (!merged && merge) {\n                        merged = true;\n                        const newNumber = this.state[tile + moveTile][column] * 2;\n                        this.state[tile + moveTile][column] = newNumber;\n                        this.score += newNumber;\n                    } else {\n                        merged = false;\n                        this.state[tile + moveTile][column] = this.state[tile][column];\n                    }\n                    this.state[tile][column] = 0;\n                    moveTiles = true;\n                }\n            }\n        }\n        if (moveTiles) this.createRandomTile();\n        return moveTiles;\n    }\n    saveState() {\n        return this.state.map((row)=>row.slice());\n    }\n    createRandomTile() {\n        let row = this.randomNumber(3);\n        while(!this.state[row].includes(0))row = this.randomNumber(3);\n        let cell = this.randomNumber(3);\n        while(this.state[row][cell] !== 0)cell = this.randomNumber(3);\n        const newState = this.state.map((currentRow)=>currentRow.slice());\n        newState[row][cell] = this.generateCellValue();\n        this.state = newState;\n        this.printTiles();\n    }\n    randomNumber(max) {\n        return Math.round(Math.random() * max);\n    }\n    generateCellValue() {\n        const result = Math.random();\n        return result > 0.9 ? 4 : 2;\n    }\n    updateStatus() {\n        if (this.playerWin()) this.status = $a5fd07fa01589658$var$Game.Status.win;\n        else if (this.playerLose()) this.status = $a5fd07fa01589658$var$Game.Status.lose;\n    }\n    playerWin() {\n        for (const tile of this.state.flat()){\n            if (tile === 2048) return true;\n        }\n        return false;\n    }\n    playerLose() {\n        for (const tile of this.state.flat()){\n            if (tile === 0) return false;\n        }\n        for(let row = 0; row <= 3; row++)for(let tile = 0; tile <= 2; tile++){\n            if (this.state[row][tile] === this.state[row][tile + 1]) return false;\n        }\n        for(let column = 0; column <= 3; column++)for(let tile = 0; tile <= 2; tile++){\n            if (this.state[tile][column] === this.state[tile + 1][column]) return false;\n        }\n        return true;\n    }\n    printTiles() {\n        const cells = document.getElementsByClassName(\"field-cell\");\n        const flatState = this.state.flat();\n        for(let i = 0; i < flatState.length; i++){\n            const currentCell = cells[i];\n            const currentState = flatState[i];\n            if (currentState > 0) {\n                if (currentCell !== undefined) {\n                    currentCell.textContent = currentState;\n                    currentCell.className = `field-cell field-cell--${currentState}`;\n                    const x = i % i * -2;\n                    const y = i / i * -2;\n                    currentCell.style.transform = `translate(${x}px, ${y}px)`;\n                }\n            } else if (currentCell !== undefined) {\n                currentCell.textContent = \"\";\n                currentCell.className = \"field-cell\";\n                currentCell.style.transform = \"translate(0, 0)\";\n            }\n        }\n    }\n    clearBoard() {\n        this.state = this.initialState.concat();\n    }\n}\n$a5fd07fa01589658$exports = $a5fd07fa01589658$var$Game;\n\n\nconst $09e991522ca7e64e$var$game = new $a5fd07fa01589658$exports();\nconst $09e991522ca7e64e$var$start = document.querySelector(\".start\");\nconst $09e991522ca7e64e$var$messageStart = document.querySelector(\".message-start\");\nconst $09e991522ca7e64e$var$messageWin = document.querySelector(\".message-win\");\nconst $09e991522ca7e64e$var$messageLose = document.querySelector(\".message-lose\");\nconst $09e991522ca7e64e$var$gameScore = document.querySelector(\".game-score\");\nconst $09e991522ca7e64e$var$touchStart = {\n    x: 0,\n    y: 0\n};\n$09e991522ca7e64e$var$initialize();\nfunction $09e991522ca7e64e$var$initialize() {\n    $09e991522ca7e64e$var$start.addEventListener(\"click\", $09e991522ca7e64e$var$onStartClick);\n    document.addEventListener(\"keydown\", $09e991522ca7e64e$var$onKeyDown);\n    document.addEventListener(\"touchstart\", $09e991522ca7e64e$var$onTouchStart);\n    document.addEventListener(\"touchend\", $09e991522ca7e64e$var$onTouchEnd);\n}\nfunction $09e991522ca7e64e$var$onStartClick() {\n    if ($09e991522ca7e64e$var$start.classList.contains(\"start\")) {\n        $09e991522ca7e64e$var$start.className = \"button restart\";\n        $09e991522ca7e64e$var$start.textContent = \"Restart\";\n        $09e991522ca7e64e$var$messageStart.classList.add(\"hidden\");\n        $09e991522ca7e64e$var$game.start();\n    } else {\n        $09e991522ca7e64e$var$start.className = \"button start\";\n        $09e991522ca7e64e$var$start.textContent = \"Start\";\n        $09e991522ca7e64e$var$messageStart.classList.remove(\"hidden\");\n        $09e991522ca7e64e$var$messageWin.classList.add(\"hidden\");\n        $09e991522ca7e64e$var$messageLose.classList.add(\"hidden\");\n        $09e991522ca7e64e$var$gameScore.textContent = \"0\";\n        $09e991522ca7e64e$var$game.restart();\n    }\n}\nfunction $09e991522ca7e64e$var$onKeyDown(keyEvent) {\n    keyEvent.preventDefault();\n    let numbersMove = false;\n    const ARROW_UP = \"ArrowUp\";\n    const ARROW_DOWN = \"ArrowDown\";\n    const ARROW_RIGHT = \"ArrowRight\";\n    const ARROW_LEFT = \"ArrowLeft\";\n    switch(keyEvent.key){\n        case ARROW_UP:\n            numbersMove = $09e991522ca7e64e$var$game.moveUp();\n            break;\n        case ARROW_DOWN:\n            numbersMove = $09e991522ca7e64e$var$game.moveDown();\n            break;\n        case ARROW_RIGHT:\n            numbersMove = $09e991522ca7e64e$var$game.moveRight();\n            break;\n        case ARROW_LEFT:\n            numbersMove = $09e991522ca7e64e$var$game.moveLeft();\n            break;\n    }\n    $09e991522ca7e64e$var$updateState(numbersMove);\n}\nfunction $09e991522ca7e64e$var$onTouchStart(touchEvent) {\n    $09e991522ca7e64e$var$touchStart.x = touchEvent.touches[0].clientX;\n    $09e991522ca7e64e$var$touchStart.y = touchEvent.touches[0].clientY;\n}\nfunction $09e991522ca7e64e$var$onTouchEnd(touchEvent) {\n    const touchX = touchEvent.changedTouches[0].clientX;\n    const touchY = touchEvent.changedTouches[0].clientY;\n    const deltaX = touchX - $09e991522ca7e64e$var$touchStart.x;\n    const deltaY = touchY - $09e991522ca7e64e$var$touchStart.y;\n    if (Math.abs(deltaX) > 10 || Math.abs(deltaY) > 10) {\n        if (Math.abs(deltaX) > Math.abs(deltaY)) {\n            if (deltaX > 0) $09e991522ca7e64e$var$game.moveRight();\n            else $09e991522ca7e64e$var$game.moveLeft();\n        } else if (deltaY > 0) $09e991522ca7e64e$var$game.moveDown();\n        else $09e991522ca7e64e$var$game.moveUp();\n        $09e991522ca7e64e$var$updateState(true);\n    }\n}\nfunction $09e991522ca7e64e$var$updateState(numbersMove) {\n    if (numbersMove) {\n        $09e991522ca7e64e$var$updateScore($09e991522ca7e64e$var$game.getScore());\n        const newStatus = $09e991522ca7e64e$var$game.getStatus();\n        if (newStatus === $a5fd07fa01589658$exports.Status.win) $09e991522ca7e64e$var$messageWin.classList.remove(\"hidden\");\n        else if (newStatus === $a5fd07fa01589658$exports.Status.lose) $09e991522ca7e64e$var$messageLose.classList.remove(\"hidden\");\n    }\n}\nfunction $09e991522ca7e64e$var$updateScore(newScore) {\n    $09e991522ca7e64e$var$gameScore.textContent = newScore;\n}\n\n\n//# sourceMappingURL=index.df0e13c7.js.map\n","'use strict';\n\n// Uncomment the next lines to use your game instance in the browser\n\nconst Game = require('../modules/Game.class');\nconst game = new Game();\n\nconst start = document.querySelector('.start');\nconst messageStart = document.querySelector('.message-start');\nconst messageWin = document.querySelector('.message-win');\nconst messageLose = document.querySelector('.message-lose');\nconst gameScore = document.querySelector('.game-score');\n\nconst touchStart = { x: 0, y: 0 };\n\ninitialize();\n\nfunction initialize() {\n  start.addEventListener('click', onStartClick);\n  document.addEventListener('keydown', onKeyDown);\n  document.addEventListener('touchstart', onTouchStart);\n  document.addEventListener('touchend', onTouchEnd);\n}\n\nfunction onStartClick() {\n  if (start.classList.contains('start')) {\n    start.className = 'button restart';\n    start.textContent = 'Restart';\n    messageStart.classList.add('hidden');\n    game.start();\n  } else {\n    start.className = 'button start';\n    start.textContent = 'Start';\n    messageStart.classList.remove('hidden');\n    messageWin.classList.add('hidden');\n    messageLose.classList.add('hidden');\n    gameScore.textContent = '0';\n\n    game.restart();\n  }\n}\n\nfunction onKeyDown(keyEvent) {\n  keyEvent.preventDefault();\n\n  let numbersMove = false;\n\n  const ARROW_UP = 'ArrowUp';\n  const ARROW_DOWN = 'ArrowDown';\n  const ARROW_RIGHT = 'ArrowRight';\n  const ARROW_LEFT = 'ArrowLeft';\n\n  switch (keyEvent.key) {\n    case ARROW_UP:\n      numbersMove = game.moveUp();\n      break;\n    case ARROW_DOWN:\n      numbersMove = game.moveDown();\n      break;\n    case ARROW_RIGHT:\n      numbersMove = game.moveRight();\n      break;\n    case ARROW_LEFT:\n      numbersMove = game.moveLeft();\n      break;\n  }\n\n  updateState(numbersMove);\n}\n\nfunction onTouchStart(touchEvent) {\n  touchStart.x = touchEvent.touches[0].clientX;\n  touchStart.y = touchEvent.touches[0].clientY;\n}\n\nfunction onTouchEnd(touchEvent) {\n  const touchX = touchEvent.changedTouches[0].clientX;\n  const touchY = touchEvent.changedTouches[0].clientY;\n\n  const deltaX = touchX - touchStart.x;\n  const deltaY = touchY - touchStart.y;\n\n  if (Math.abs(deltaX) > 10 || Math.abs(deltaY) > 10) {\n    if (Math.abs(deltaX) > Math.abs(deltaY)) {\n      if (deltaX > 0) {\n        game.moveRight();\n      } else {\n        game.moveLeft();\n      }\n    } else {\n      if (deltaY > 0) {\n        game.moveDown();\n      } else {\n        game.moveUp();\n      }\n    }\n\n    updateState(true);\n  }\n}\n\nfunction updateState(numbersMove) {\n  if (numbersMove) {\n    updateScore(game.getScore());\n\n    const newStatus = game.getStatus();\n\n    if (newStatus === Game.Status.win) {\n      messageWin.classList.remove('hidden');\n    } else if (newStatus === Game.Status.lose) {\n      messageLose.classList.remove('hidden');\n    }\n  }\n}\n\nfunction updateScore(newScore) {\n  gameScore.textContent = newScore;\n}\n","'use strict';\n\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */\nclass Game {\n  static Status = {\n    idle: 'idle',\n    playing: 'playing',\n    win: 'win',\n    lose: 'lose',\n  };\n\n  constructor(\n    initialState = [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ],\n  ) {\n    this.state = [...initialState];\n    this.status = Game.Status.idle;\n    this.score = 0;\n    this.initialState = initialState;\n  }\n\n  getScore() {\n    return this.score;\n  }\n\n  getState() {\n    return this.state;\n  }\n\n  getStatus() {\n    this.updateStatus();\n\n    return this.status;\n  }\n\n  start() {\n    this.status = Game.Status.playing;\n    this.state = this.initialState.concat();\n    this.createRandomTile();\n    this.createRandomTile();\n    this.printTiles();\n  }\n\n  restart() {\n    this.clearBoard();\n    this.printTiles();\n    this.status = Game.Status.idle;\n    this.score = 0;\n  }\n\n  moveLeft() {\n    if (this.status !== Game.Status.playing) {\n      return;\n    }\n\n    this.saveState();\n\n    let moveTiles = false;\n\n    for (let row = 0; row < 4; row++) {\n      let merged = false;\n\n      for (let tile = 1; tile < 4; tile++) {\n        if (this.state[row][tile] > 0) {\n          let moveTile = 0;\n\n          let merge = false;\n\n          while (this.state[row][tile - moveTile - 1] === 0) {\n            moveTile++;\n          }\n\n          if (\n            !merged &&\n            this.state[row][tile - moveTile - 1] === this.state[row][tile]\n          ) {\n            moveTile++;\n            merge = true;\n          }\n\n          if (moveTile > 0) {\n            if (!merged && merge) {\n              merged = true;\n\n              const newNumber = this.state[row][tile - moveTile] * 2;\n\n              this.state[row][tile - moveTile] = newNumber;\n\n              this.score += newNumber;\n            } else {\n              merged = false;\n\n              this.state[row][tile - moveTile] = this.state[row][tile];\n            }\n\n            this.state[row][tile] = 0;\n\n            moveTiles = true;\n          }\n        }\n      }\n    }\n\n    if (moveTiles) {\n      this.createRandomTile();\n    }\n\n    return moveTiles;\n  }\n\n  moveRight() {\n    if (this.status !== Game.Status.playing) {\n      return;\n    }\n\n    this.saveState();\n\n    let moveTiles = false;\n\n    for (let row = 0; row < 4; row++) {\n      let merged = false;\n\n      for (let tile = 2; tile >= 0; tile--) {\n        if (this.state[row][tile] > 0) {\n          let moveTile = 0;\n          let merge = false;\n\n          while (this.state[row][tile + moveTile + 1] === 0) {\n            moveTile++;\n          }\n\n          if (\n            !merged &&\n            this.state[row][tile + moveTile + 1] === this.state[row][tile]\n          ) {\n            moveTile++;\n            merge = true;\n          }\n\n          if (moveTile > 0) {\n            if (!merged && merge) {\n              merged = true;\n\n              const newNumber = this.state[row][tile + moveTile] * 2;\n\n              this.state[row][tile + moveTile] = newNumber;\n\n              this.score += newNumber;\n            } else {\n              merged = false;\n\n              this.state[row][tile + moveTile] = this.state[row][tile];\n            }\n\n            this.state[row][tile] = 0;\n            moveTiles = true;\n          }\n        }\n      }\n    }\n\n    if (moveTiles) {\n      this.createRandomTile();\n    }\n\n    return moveTiles;\n  }\n\n  moveUp() {\n    if (this.status !== Game.Status.playing) {\n      return;\n    }\n\n    this.saveState();\n\n    let moveTiles = false;\n\n    for (let column = 0; column < 4; column++) {\n      let merged = false;\n\n      for (let tile = 1; tile < 4; tile++) {\n        if (this.state[tile][column] > 0) {\n          let moveTile = 0;\n          let merge = false;\n\n          while (\n            tile - moveTile - 1 >= 0 &&\n            this.state[tile - moveTile - 1][column] === 0\n          ) {\n            moveTile++;\n          }\n\n          if (\n            !merged &&\n            tile - moveTile - 1 >= 0 &&\n            this.state[tile - moveTile - 1][column] === this.state[tile][column]\n          ) {\n            moveTile++;\n            merge = true;\n          }\n\n          if (moveTile > 0) {\n            if (!merged && merge) {\n              merged = true;\n\n              const newNumber = this.state[tile - moveTile][column] * 2;\n\n              this.state[tile - moveTile][column] = newNumber;\n\n              this.score += newNumber;\n            } else {\n              merged = false;\n\n              this.state[tile - moveTile][column] = this.state[tile][column];\n            }\n\n            this.state[tile][column] = 0;\n\n            moveTiles = true;\n          }\n        }\n      }\n    }\n\n    if (moveTiles) {\n      this.createRandomTile();\n    }\n\n    return moveTiles;\n  }\n\n  moveDown() {\n    if (this.status !== Game.Status.playing) {\n      return;\n    }\n\n    this.saveState();\n\n    let moveTiles = false;\n\n    for (let column = 0; column < 4; column++) {\n      let merged = false;\n\n      for (let tile = 2; tile >= 0; tile--) {\n        if (this.state[tile][column] > 0) {\n          let moveTile = 0;\n          let merge = false;\n\n          while (\n            tile + moveTile + 1 < this.state.length &&\n            this.state[tile + moveTile + 1][column] === 0\n          ) {\n            moveTile++;\n          }\n\n          if (\n            !merged &&\n            tile + moveTile + 1 < this.state.length &&\n            this.state[tile + moveTile + 1][column] === this.state[tile][column]\n          ) {\n            moveTile++;\n            merge = true;\n          }\n\n          if (moveTile > 0) {\n            if (!merged && merge) {\n              merged = true;\n\n              const newNumber = this.state[tile + moveTile][column] * 2;\n\n              this.state[tile + moveTile][column] = newNumber;\n\n              this.score += newNumber;\n            } else {\n              merged = false;\n\n              this.state[tile + moveTile][column] = this.state[tile][column];\n            }\n\n            this.state[tile][column] = 0;\n\n            moveTiles = true;\n          }\n        }\n      }\n    }\n\n    if (moveTiles) {\n      this.createRandomTile();\n    }\n\n    return moveTiles;\n  }\n\n  saveState() {\n    return this.state.map((row) => row.slice());\n  }\n\n  createRandomTile() {\n    let row = this.randomNumber(3);\n\n    while (!this.state[row].includes(0)) {\n      row = this.randomNumber(3);\n    }\n\n    let cell = this.randomNumber(3);\n\n    while (this.state[row][cell] !== 0) {\n      cell = this.randomNumber(3);\n    }\n\n    const newState = this.state.map((currentRow) => currentRow.slice());\n\n    newState[row][cell] = this.generateCellValue();\n    this.state = newState;\n    this.printTiles();\n  }\n\n  randomNumber(max) {\n    return Math.round(Math.random() * max);\n  }\n\n  generateCellValue() {\n    const result = Math.random();\n\n    return result > 0.9 ? 4 : 2;\n  }\n\n  updateStatus() {\n    if (this.playerWin()) {\n      this.status = Game.Status.win;\n    } else if (this.playerLose()) {\n      this.status = Game.Status.lose;\n    }\n  }\n\n  playerWin() {\n    for (const tile of this.state.flat()) {\n      if (tile === 2048) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  playerLose() {\n    for (const tile of this.state.flat()) {\n      if (tile === 0) {\n        return false;\n      }\n    }\n\n    for (let row = 0; row <= 3; row++) {\n      for (let tile = 0; tile <= 2; tile++) {\n        if (this.state[row][tile] === this.state[row][tile + 1]) {\n          return false;\n        }\n      }\n    }\n\n    for (let column = 0; column <= 3; column++) {\n      for (let tile = 0; tile <= 2; tile++) {\n        if (this.state[tile][column] === this.state[tile + 1][column]) {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }\n\n  printTiles() {\n    const cells = document.getElementsByClassName('field-cell');\n    const flatState = this.state.flat();\n\n    for (let i = 0; i < flatState.length; i++) {\n      const currentCell = cells[i];\n      const currentState = flatState[i];\n\n      if (currentState > 0) {\n        if (currentCell !== undefined) {\n          currentCell.textContent = currentState;\n          currentCell.className = `field-cell field-cell--${currentState}`;\n\n          const x = (i % i) * -2;\n          const y = (i / i) * -2;\n\n          currentCell.style.transform = `translate(${x}px, ${y}px)`;\n        }\n      } else {\n        if (currentCell !== undefined) {\n          currentCell.textContent = '';\n          currentCell.className = 'field-cell';\n          currentCell.style.transform = 'translate(0, 0)';\n        }\n      }\n    }\n  }\n\n  clearBoard() {\n    this.state = this.initialState.concat();\n  }\n}\n\nmodule.exports = Game;\n"],"names":["$a5fd07fa01589658$exports","$a5fd07fa01589658$var$Game","Status","idle","playing","win","lose","constructor","initialState","state","status","score","getScore","getState","getStatus","updateStatus","start","concat","createRandomTile","printTiles","restart","clearBoard","moveLeft","saveState","moveTiles","row","merged","tile","moveTile","merge","newNumber","moveRight","moveUp","column","moveDown","length","map","slice","randomNumber","includes","cell","newState","currentRow","generateCellValue","max","Math","round","random","result","playerWin","playerLose","flat","cells","document","getElementsByClassName","flatState","i","currentCell","currentState","undefined","textContent","className","x","y","style","transform","$09e991522ca7e64e$var$game","$09e991522ca7e64e$var$start","querySelector","$09e991522ca7e64e$var$messageStart","$09e991522ca7e64e$var$messageWin","$09e991522ca7e64e$var$messageLose","$09e991522ca7e64e$var$gameScore","$09e991522ca7e64e$var$touchStart","$09e991522ca7e64e$var$updateState","numbersMove","newScore","newStatus","classList","remove","addEventListener","contains","add","keyEvent","preventDefault","key","touchEvent","touches","clientX","clientY","touchX","changedTouches","touchY","deltaX","deltaY","abs"],"version":3,"file":"index.df0e13c7.js.map"}